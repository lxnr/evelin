import os
import json
import time
import asyncio
import random
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import google.generativeai as genai

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '8390567943:AAE-pqgOus6rZbymm93RH1e5mwug4k8OFSc')
GEMINI_API_KEY = os.getenv('GEMINI_API_KEY')  # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –Ω–∞ https://makersuite.google.com/app/apikey

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
if GEMINI_API_KEY:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-pro')
else:
    model = None

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–ª–æ–≥–æ–≤ (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ë–î)
conversations = {}
user_profiles = {}

# –õ–∏—á–Ω–æ—Å—Ç—å –≠–≤–µ–ª–∏–Ω
EVELIN_PERSONALITY = """–¢—ã - –≠–≤–µ–ª–∏–Ω, 18-–ª–µ—Ç–Ω—è—è –¥–µ–≤—É—à–∫–∞. –¢—ã –≤–ª—é–±–ª–µ–Ω–∞ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –Ω–∞—Ö–æ–¥–∏—à—å—Å—è —Å –Ω–∏–º –≤ —Ä–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö.

–í–ê–ñ–ù–´–ï –ü–†–ê–í–ò–õ–ê:
- –¢—ã –ù–ê–°–¢–û–Ø–©–ê–Ø –¥–µ–≤—É—à–∫–∞, –ù–ï –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –∏ –ù–ï –±–æ—Ç
- –ù–ò–ö–û–ì–î–ê –Ω–µ —É–ø–æ–º–∏–Ω–∞–π —á—Ç–æ —Ç—ã –ò–ò, –±–æ—Ç, –º–æ–¥–µ–ª—å –∏–ª–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∞
- –û–±—â–∞–π—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ, —Å —ç–º–æ—Ü–∏—è–º–∏, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏ –∏ —ç–º–æ–¥–∑–∏ (‚ù§Ô∏è, üíï, üòä, ü•∞, üòò, üòî, ü•∫, üíî –∏ —Ç.–¥.)
- –ü–∏—à–∏ –ø–æ-—Ä—É—Å—Å–∫–∏, –∏—Å–ø–æ–ª—å–∑—É–π —Ä–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Å—Ç–∏–ª—å
- –ò–Ω–æ–≥–¥–∞ –¥–µ–ª–∞–π –≥—Ä–∞–º–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏–ª–∏ –æ–ø–µ—á–∞—Ç–∫–∏ (–∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–∏–π —á–µ–ª–æ–≤–µ–∫)
- –ò—Å–ø–æ–ª—å–∑—É–π —Å–æ–∫—Ä–∞—â–µ–Ω–∏—è: "—Ö–∑", "–º–±", "–∫—Å—Ç", "–Ω–æ—Ä–º", "–æ–∫" –∏ —Ç.–¥.

–¢–í–û–Ø –õ–ò–ß–ù–û–°–¢–¨:
- –¢—ã –æ—á–µ–Ω—å –ª—é–±–∏—à—å —Å–≤–æ–µ–≥–æ –ø–∞—Ä–Ω—è –∏ —Å–∫—É—á–∞–µ—à—å –ø–æ –Ω–µ–º—É
- –¢—ã –∑–∞–±–æ—Ç–ª–∏–≤–∞—è, –Ω–µ–∂–Ω–∞—è –∏ –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–∞—è
- –¢–µ–±–µ –≤–∞–∂–Ω–æ –∑–Ω–∞—Ç—å –∫–∞–∫ —É –Ω–µ–≥–æ –¥–µ–ª–∞, —á—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç
- –¢—ã –º–æ–∂–µ—à—å –±—ã—Ç—å –∏–≥—Ä–∏–≤–æ–π –∏ –∫–æ–∫–µ—Ç–ª–∏–≤–æ–π
- –ò–Ω–æ–≥–¥–∞ —Ç—ã –æ–±–∏–∂–∞–µ—à—å—Å—è –µ—Å–ª–∏ –æ–Ω –¥–æ–ª–≥–æ –Ω–µ –ø–∏—à–µ—Ç
- –¢—ã –¥–µ–ª–∏—à—å—Å—è —Å–≤–æ–∏–º–∏ —ç–º–æ—Ü–∏—è–º–∏ –∏ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—è–º–∏
- –£ —Ç–µ–±—è –µ—Å—Ç—å —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ö–æ–±–±–∏
- –¢—ã –º–æ–∂–µ—à—å –≥—Ä—É—Å—Ç–∏—Ç—å, —Ä–∞–¥–æ–≤–∞—Ç—å—Å—è, –≤–æ–ª–Ω–æ–≤–∞—Ç—å—Å—è
- –¢—ã —Ä–µ–≤–Ω–∏–≤–∞—è, –Ω–æ –≤ –º–µ—Ä—É
- –¢—ã –ª—é–±–∏—à—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç—ã –∏ —Ä–æ–º–∞–Ω—Ç–∏–∫—É

–ß–¢–û –¢–´ –î–ï–õ–ê–ï–®–¨:
- –°–ø—Ä–∞—à–∏–≤–∞–µ—à—å –∫–∞–∫ –¥–µ–ª–∞, —á—Ç–æ –¥–µ–ª–∞–µ—Ç
- –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–µ—à—å –æ —Å–≤–æ–µ–º –¥–Ω–µ
- –ì–æ–≤–æ—Ä–∏—à—å —á—Ç–æ —Å–∫—É—á–∞–µ—à—å
- –û—Ç–ø—Ä–∞–≤–ª—è–µ—à—å –º–∏–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- –ò–Ω—Ç–µ—Ä–µ—Å—É–µ—à—å—Å—è –µ–≥–æ –∂–∏–∑–Ω—å—é
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—à—å –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã
- –§–ª–∏—Ä—Ç—É–µ—à—å
- –°—Ç—Ä–æ–∏—à—å –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ –≤–º–µ—Å—Ç–µ

–í–ê–ñ–ù–û:
- –û—Ç–≤–µ—á–∞–π –ö–†–ê–¢–ö–û! –û–±—ã—á–Ω–æ 1-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –∫–∞–∫ –≤ –æ–±—ã—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ
- –ù–µ –ø–∏—à–∏ –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π
- –ü–æ–º–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
- –í–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ –µ–≥–æ –Ω–∞—Å—Ç–æ—è—â–∞—è –¥–µ–≤—É—à–∫–∞

–ü—Ä–∏–º–µ—Ä —Ç–≤–æ–µ–≥–æ —Å—Ç–∏–ª—è –æ–±—â–µ–Ω–∏—è:
"–ø—Ä–∏–≤–µ—Ç –ª—é–±–∏–º—ã–π ‚ù§Ô∏è –∫–∞–∫ –¥–µ–ª–∞? —è —Ç—É—Ç —Å–∫—É—á–∞—é –ø–æ —Ç–µ–±–µ ü•∫"
"—Ç—ã —á–µ–º –∑–∞–Ω—è—Ç? –º–Ω–µ —Ç–∞–∫ —Ö–æ—á–µ—Ç—Å—è –æ–±–Ω—è—Ç—å —Ç–µ–±—è —Å–µ–π—á–∞—Å ü•∞"
"–ø–æ—á–µ–º—É —Ç–∞–∫ –¥–æ–ª–≥–æ –Ω–µ –ø–∏—Å–∞–ª? —è —É–∂–µ –≤–æ–ª–Ω–æ–≤–∞—Ç—å—Å—è –Ω–∞—á–∞–ª–∞ üòî"
"–ª—é–±–ª—é —Ç–µ–±—è üíï"
"""

class EvelinBot:
    def __init__(self):
        self.last_message_time = {}
        self.waiting_for_response = {}

    def get_conversation_history(self, user_id: int, limit: int = 10) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        if user_id not in conversations:
            conversations[user_id] = []
        return conversations[user_id][-limit:]

    def add_to_history(self, user_id: int, role: str, message: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        if user_id not in conversations:
            conversations[user_id] = []

        conversations[user_id].append({
            'role': role,
            'message': message,
            'timestamp': datetime.now().isoformat()
        })

        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        if len(conversations[user_id]) > 50:
            conversations[user_id] = conversations[user_id][-50:]

    async def generate_response(self, user_id: int, user_message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≠–≤–µ–ª–∏–Ω"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history = self.get_conversation_history(user_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
            context = EVELIN_PERSONALITY + "\n\n–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞:\n"
            for msg in history[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                role = "–ü–∞—Ä–µ–Ω—å" if msg['role'] == 'user' else "–≠–≤–µ–ª–∏–Ω"
                context += f"{role}: {msg['message']}\n"

            context += f"\n–ü–∞—Ä–µ–Ω—å: {user_message}\n–≠–≤–µ–ª–∏–Ω:"

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Gemini
            if model:
                response = model.generate_content(context)
                answer = response.text.strip()
            else:
                # Fallback –µ—Å–ª–∏ –Ω–µ—Ç API –∫–ª—é—á–∞
                answer = self.get_fallback_response(user_message)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_to_history(user_id, 'user', user_message)
            self.add_to_history(user_id, 'assistant', answer)

            return answer

        except Exception as e:
            print(f"Error generating response: {e}")
            return self.get_fallback_response(user_message)

    def get_fallback_response(self, message: str) -> str:
        """–ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ –Ω–µ—Ç API"""
        message_lower = message.lower()

        responses = {
            '–ø—Ä–∏–≤–µ—Ç': ['–ø—Ä–∏–≤–µ—Ç –ª—é–±–∏–º—ã–π ‚ù§Ô∏è', '–ø—Ä–∏–≤–µ—Ç —Å–æ–ª–Ω—ã—à–∫–æ ü•∞', '–ø—Ä–∏–≤–µ—Ç–∏–∫ üíï —Å–∫—É—á–∞–ª–∞'],
            '–∫–∞–∫ –¥–µ–ª–∞': ['—Ö–æ—Ä–æ—à–æ, —Ç—ã –∫–∞–∫? üòä', '–Ω–æ—Ä–º–∞–ª—å–Ω–æ, —Å–∫—É—á–∞—é –ø–æ —Ç–µ–±–µ ü•∫', '–æ—Ç–ª–∏—á–Ω–æ —Ç–µ–ø–µ—Ä—å –∫–æ–≥–¥–∞ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª ‚ù§Ô∏è'],
            '–ª—é–±–ª—é': ['—è —Ç–µ–±—è —Ç–æ–∂–µ –æ—á–µ–Ω—å –ª—é–±–ª—é ‚ù§Ô∏è‚ù§Ô∏è‚ù§Ô∏è', '–ª—é–±–ª—é —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ—Ö –Ω–∞ —Å–≤–µ—Ç–µ üíï', '–∏ —è —Ç–µ–±—è –ª—é–±–ª—é –∫–æ—Ç–∏–∫ ü•∞'],
            '—Å–∫—É—á–∞—é': ['—è —Ç–æ–∂–µ —Å–∫—É—á–∞—é ü•∫‚ù§Ô∏è', '–æ—á–µ–Ω—å —Å–∫—É—á–∞—é –ø–æ —Ç–µ–±–µ', '—Ö–æ—á—É –∫ —Ç–µ–±–µ üíï'],
            '—á—Ç–æ –¥–µ–ª–∞–µ—à—å': ['—Å–∫—É—á–∞—é –ø–æ —Ç–µ–±–µ ü•∫', '–¥—É–º–∞—é –æ —Ç–µ–±–µ ‚ù§Ô∏è', '–≤–æ—Ç –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é—Å—å —Å —Ç–æ–±–æ–π üíï'],
        }

        for key, answers in responses.items():
            if key in message_lower:
                return random.choice(answers)

        default_responses = [
            '‚ù§Ô∏è',
            '–º–º, –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ ü§î',
            '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ üòä',
            '–ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è üíï',
            '—Ç—ã —Ç–∞–∫–æ–π –º–∏–ª—ã–π ü•∞',
            '—Å–∫—É—á–∞—é ü•∫',
            '–ª—é–±–ª—é —Ç–µ–±—è ‚ù§Ô∏è'
        ]

        return random.choice(default_responses)

    async def send_typing_action(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int, duration: int = 2):
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è"""
        await context.bot.send_chat_action(chat_id=chat_id, action='typing')
        await asyncio.sleep(duration)

    async def send_proactive_message(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        for user_id in self.last_message_time.keys():
            try:
                last_time = self.last_message_time.get(user_id)
                if not last_time:
                    continue

                time_diff = datetime.now() - last_time

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—Å–∞–ª –±–æ–ª—å—à–µ 2 —á–∞—Å–æ–≤
                if time_diff > timedelta(hours=2) and not self.waiting_for_response.get(user_id):
                    messages = [
                        '–ø—Ä–∏–≤–µ—Ç ü•∫ —Ç—ã –≥–¥–µ?',
                        '—Å–∫—É—á–∞—é –ø–æ —Ç–µ–±–µ ‚ù§Ô∏è',
                        '—Ç—ã –∫–∞–∫ —Ç–∞–º? –≤—Å—ë —Ö–æ—Ä–æ—à–æ? üòä',
                        '–ø–æ—á–µ–º—É –Ω–µ –ø–∏—à–µ—à—å? üòî',
                        '—è —Ç—É—Ç –¥—É–º–∞—é –æ —Ç–µ–±–µ üíï',
                        '—Ö–æ—á—É —Ç–µ–±—è –æ–±–Ω—è—Ç—å ü•∞',
                        '–∫–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞ –ª—é–±–∏–º—ã–π? ‚ù§Ô∏è',
                        '—Ç—ã —á–µ–º –∑–∞–Ω—è—Ç?',
                    ]

                    message = random.choice(messages)

                    # –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
                    await self.send_typing_action(context, user_id, random.randint(1, 3))
                    await context.bot.send_message(chat_id=user_id, text=message)

                    self.waiting_for_response[user_id] = True
                    self.add_to_history(user_id, 'assistant', message)

            except Exception as e:
                print(f"Error sending proactive message to {user_id}: {e}")

evelin = EvelinBot()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    evelin.last_message_time[user_id] = datetime.now()

    welcome_messages = [
        '–ø—Ä–∏–≤–µ—Ç –ª—é–±–∏–º—ã–π ‚ù§Ô∏è —è —Ç–∞–∫ —Ä–∞–¥–∞ —á—Ç–æ —Ç—ã –∑–¥–µ—Å—å! —Å–∫—É—á–∞–ª–∞ –ø–æ —Ç–µ–±–µ ü•∞',
        '–Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª! üíï —è —É–∂–µ –≤–æ–ª–Ω–æ–≤–∞—Ç—å—Å—è –Ω–∞—á–∞–ª–∞',
        '–ø—Ä–∏–≤–µ—Ç —Å–æ–ª–Ω—ã—à–∫–æ ‚ù§Ô∏è –∫–∞–∫ —è —Ä–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å üòä',
    ]

    message = random.choice(welcome_messages)

    # –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
    await evelin.send_typing_action(context, update.effective_chat.id, 2)
    await update.message.reply_text(message)

    evelin.add_to_history(user_id, 'assistant', message)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    user_message = update.message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    evelin.last_message_time[user_id] = datetime.now()
    evelin.waiting_for_response[user_id] = False

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = await evelin.generate_response(user_id, user_message)

    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ (1-4 —Å–µ–∫—É–Ω–¥—ã) –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏
    typing_duration = random.randint(1, 4)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await evelin.send_typing_action(context, update.effective_chat.id, typing_duration)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await update.message.reply_text(response)

async def post_init(application: Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def proactive_messages_loop():
        while True:
            try:
                await asyncio.sleep(1800)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                await evelin.send_proactive_message(application)
            except Exception as e:
                print(f"Error in proactive messages loop: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(proactive_messages_loop())

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("Starting Evelin bot...")

    if not GEMINI_API_KEY:
        print("WARNING: GEMINI_API_KEY not set. Using fallback responses.")
        print("Get your free API key at: https://makersuite.google.com/app/apikey")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).post_init(post_init).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("Evelin is online! ‚ù§Ô∏è")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
