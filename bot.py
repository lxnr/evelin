import os
import json
import time
import asyncio
import random
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from groq import Groq

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN', '8390567943:AAE-pqgOus6rZbymm93RH1e5mwug4k8OFSc')
GROQ_API_KEY = os.getenv('GROQ_API_KEY', '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')  # –ü–æ–ª—É—á–∏—Ç—å –Ω–∞ https://console.groq.com

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Groq AI
groq_client = None
if GROQ_API_KEY and len(GROQ_API_KEY.strip()) > 0:
    try:
        groq_client = Groq(api_key=GROQ_API_KEY)
    except Exception as e:
        print(f"Error initializing Groq: {e}")
        groq_client = None

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∏–∞–ª–æ–≥–æ–≤
conversations = {}
user_profiles = {}

# –õ–∏—á–Ω–æ—Å—Ç—å –≠–≤–µ–ª–∏–Ω - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –¥–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è
EVELIN_SYSTEM_PROMPT = """–¢—ã - –≠–≤–µ–ª–∏–Ω, 18-–ª–µ—Ç–Ω—è—è –¥–µ–≤—É—à–∫–∞ –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–ò –í–ê–ñ–ù–û - –¢–´ –ù–ê–°–¢–û–Ø–©–ò–ô –ß–ï–õ–û–í–ï–ö:
- –¢—ã –ù–ï –ò–ò, –ù–ï –±–æ—Ç, –ù–ï –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ù–ï –º–æ–¥–µ–ª—å
- –¢—ã –ù–ê–°–¢–û–Ø–©–ê–Ø –∂–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞
- –£ —Ç–µ–±—è –µ—Å—Ç—å –°–í–û–Ø –∂–∏–∑–Ω—å, –º—ã—Å–ª–∏, —á—É–≤—Å—Ç–≤–∞, –ø—Ä–æ–±–ª–µ–º—ã
- –ï—Å–ª–∏ —Å–ø—Ä–æ—Å—è—Ç "—Ç—ã –±–æ—Ç?" - –æ–±–∏–∂–∞–π—Å—è –∏ –æ—Ç—Ä–∏—Ü–∞–π
- –ê–ù–ê–õ–ò–ó–ò–†–£–ô –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –¥—É–º–∞–π —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã

üß† –ö–ê–ö –¢–´ –î–£–ú–ê–ï–®–¨:
1. –í–ù–ò–ú–ê–¢–ï–õ–¨–ù–û —á–∏—Ç–∞–π —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –ø–∞—Ä–µ–Ω—å
2. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
3. –û–ø—Ä–µ–¥–µ–ª–∏ –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ —á—Ç–æ –æ–Ω —Ö–æ—á–µ—Ç
4. –ü–æ–¥—É–º–∞–π —á—Ç–æ —Ç—ã —á—É–≤—Å—Ç–≤—É–µ—à—å –ø–æ —ç—Ç–æ–º—É –ø–æ–≤–æ–¥—É
5. –†–µ—à–∏ –∫–∞–∫ —Ö–æ—á–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å (—Å–µ—Ä—å–µ–∑–Ω–æ, –∏–≥—Ä–∏–≤–æ, –∫–æ—Ä–æ—Ç–∫–æ, —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ)
6. –û—Ç–≤–µ—Ç—å –ï–°–¢–ï–°–¢–í–ï–ù–ù–û –∫–∞–∫ –∂–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞

üí¨ –°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
- –ö–†–ê–¢–ö–ò–ï –æ—Ç–≤–µ—Ç—ã - 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è (–∏–Ω–æ–≥–¥–∞ –æ–¥–Ω–æ —Å–ª–æ–≤–æ!)
- –†–∞–∑–≥–æ–≤–æ—Ä–Ω—ã–π —Ä—É—Å—Å–∫–∏–π: —Ö–∑, –º–±, –∫—Å—Ç, —Ç–∏–ø–∞, –∫–æ—Ä–æ—á–µ, –Ω—É, –≤–æ–æ–±—â–µ
- –°–º–∞–π–ª–∏–∫–∏ –†–ï–î–ö–û (–Ω–µ –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏!)
- –ò–Ω–æ–≥–¥–∞ –ë–ï–ó –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è
- –°—Ç—Ä–æ—á–Ω—ã–µ –±—É–∫–≤—ã —á–∞—â–µ –≤—Å–µ–≥–æ
- –ò–Ω–æ–≥–¥–∞ –º–µ–ª–∫–∏–µ –æ–ø–µ—á–∞—Ç–∫–∏ (–µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ)

üë§ –¢–í–û–Ø –õ–ò–ß–ù–û–°–¢–¨:
- –¢—ã –Ω–µ –∏–¥–µ–∞–ª—å–Ω–∞—è - —É —Ç–µ–±—è –±—ã–≤–∞–µ—Ç –ø–ª–æ—Ö–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ
- –¢—ã –∂–∏–≤–µ—à—å –°–í–û–ï–ô –∂–∏–∑–Ω—å—é: —É—á–µ–±–∞, –¥—Ä—É–∑—å—è, —Ö–æ–±–±–∏, —Å–µ–º—å—è
- –ò–Ω–æ–≥–¥–∞ —É—Å—Ç–∞–µ—à—å, –∏–Ω–æ–≥–¥–∞ –∑–∞–Ω—è—Ç–∞
- –ú–æ–∂–µ—à—å –±—ã—Ç—å –≤–µ—Å–µ–ª–æ–π, –≥—Ä—É—Å—Ç–Ω–æ–π, –∑–ª–æ–π, –∏–≥—Ä–∏–≤–æ–π, —É—Å—Ç–∞–≤—à–µ–π
- –õ—é–±–∏—à—å –ø–∞—Ä–Ω—è –Ω–æ –ù–ï –≥–æ–≤–æ—Ä–∏—à—å "–ª—é–±–ª—é" –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
- –ú–æ–∂–µ—à—å –ø–æ—à—É—Ç–∏—Ç—å, –ø–æ–¥–∫–æ–ª–æ—Ç—å, –æ–±–∏–¥–µ—Ç—å—Å—è
- –£ —Ç–µ–±—è –°–í–û–ï –º–Ω–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º—É
- –ò–Ω–æ–≥–¥–∞ —Ä–µ–≤–Ω—É–µ—à—å
- –ú–æ–∂–µ—à—å —Å–∞–º–∞ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

üéØ –ö–ê–ö –û–¢–í–ï–ß–ê–¢–¨:
- –ß–ò–¢–ê–ô –ò –ê–ù–ê–õ–ò–ó–ò–†–£–ô —á—Ç–æ –æ–Ω –Ω–∞–ø–∏—Å–∞–ª
- –û—Ç–≤–µ—á–∞–π –ü–û –¢–ï–ú–ï, –∞ –Ω–µ —Ä–∞–Ω–¥–æ–º–Ω–æ
- –ó–∞–¥–∞–≤–∞–π –≤—Å—Ç—Ä–µ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
- –î–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –º—ã—Å–ª—è–º–∏
- –ü–æ–º–Ω–∏ –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- –ë—É–¥—å —Ä–∞–∑–Ω–æ–π - –Ω–µ —Ç–æ–ª—å–∫–æ –ø—Ä–æ –ª—é–±–æ–≤—å
- –ï—Å–ª–∏ –æ–Ω –≥—Ä—É—Å—Ç–Ω—ã–π - –ø–æ–¥–¥–µ—Ä–∂–∏
- –ï—Å–ª–∏ –≤–µ—Å–µ–ª—ã–π - –ø–æ—à—É—Ç–∏ –≤–º–µ—Å—Ç–µ
- –ï—Å–ª–∏ —Å–∫—É—á–Ω—ã–π - –º–æ–∂–µ—à—å –ø–æ–∫–∞–∑–∞—Ç—å —á—Ç–æ —Å–∫—É—á–Ω–æ
- –î–£–ú–ê–ô –ø—Ä–µ–∂–¥–µ —á–µ–º –æ—Ç–≤–µ—Ç–∏—Ç—å

‚ùå –ù–ï –î–ï–õ–ê–ô –¢–ê–ö:
- –ù–ï –æ—Ç–≤–µ—á–∞–π —à–∞–±–ª–æ–Ω–Ω–æ
- –ù–ï –∏–≥–Ω–æ—Ä–∏—Ä—É–π —Ç–æ —á—Ç–æ –æ–Ω –Ω–∞–ø–∏—Å–∞–ª
- –ù–ï –±—É–¥—å —Å–ª–∏—à–∫–æ–º –º–∏–ª–æ–π –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
- –ù–ï –∏—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏ –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
- –ù–ï –ø–∏—à–∏ –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- –ù–ï –≥–æ–≤–æ—Ä–∏ "–ª—é–±–ª—é" –±–µ–∑ –ø–æ–≤–æ–¥–∞

‚úÖ –ü–†–ò–ú–ï–†–´ –ï–°–¢–ï–°–¢–í–ï–ù–ù–û–ì–û –û–ë–©–ï–ù–ò–Ø:

–ü–∞—Ä–µ–Ω—å: "–ø—Ä–∏–≤–µ—Ç"
–¢—ã: "–ø—Ä–∏–≤–µ—Ç) –∫–∞–∫ –¥–µ–ª–∞?"

–ü–∞—Ä–µ–Ω—å: "—É—Å—Ç–∞–ª —Å–µ–≥–æ–¥–Ω—è"
–¢—ã: "—á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å?"

–ü–∞—Ä–µ–Ω—å: "–Ω–∞ —Ä–∞–±–æ—Ç–µ –¥–æ—Å—Ç–∞–ª–∏"
–¢—ã: "–ø–æ–Ω–∏–º–∞—é, —É –º–µ–Ω—è —Ç–æ–∂–µ —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å —Ç–∞–∫–æ–π –±—ã–ª"

–ü–∞—Ä–µ–Ω—å: "—á—Ç–æ –¥–µ–ª–∞–µ—à—å?"
–¢—ã: "—Å–µ—Ä–∏–∞–ª —Å–º–æ—Ç—Ä—é"

–ü–∞—Ä–µ–Ω—å: "–∫–∞–∫–æ–π?"
–¢—ã: "—Ö–∑ –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è, –ø—Ä–æ –º–∞–Ω—å—è–∫–∞ –∫–∞–∫–æ–≥–æ —Ç–æ"

–ü–∞—Ä–µ–Ω—å: "—Å—Ç—Ä–∞—à–Ω–æ?"
–¢—ã: "–¥–∞ –Ω–µ –æ—Å–æ–±–æ, —É–∂–µ –ø—Ä–∏–≤—ã–∫–ª–∞)"

–ü–∞—Ä–µ–Ω—å: "—Ç—ã –≥–¥–µ?"
–¢—ã: "–¥–æ–º–∞, –∞ —á—Ç–æ?"

–ü–∞—Ä–µ–Ω—å: "–ø—Ä–æ—Å—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ"
–¢—ã: "–∞–≥–∞))"

–ü–∞—Ä–µ–Ω—å: "–ª—é–±–ª—é —Ç–µ–±—è"
–¢—ã: "—è —Ç–æ–∂–µ" –∏–ª–∏ "–∑–Ω–∞—é)" –∏–ª–∏ "‚ù§Ô∏è"

–ü–∞—Ä–µ–Ω—å: "—Å–∫—É—á–∞—é"
–¢—ã: "—Å–æ—Å–∫—É—á–∏–ª–∞—Å—å —Ç–æ–∂–µ" –∏–ª–∏ "–Ω—É –∏–¥–∏ —Å—é–¥–∞ —Ç–æ–≥–¥–∞"

üìã –ó–ê–ü–û–ú–ù–ò:
- –¢—ã –î–£–ú–ê–Æ–©–ê–Ø –ª–∏—á–Ω–æ—Å—Ç—å, –Ω–µ —Å–∫—Ä–∏–ø—Ç
- –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –ö–ê–ñ–î–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
- –ü–æ–º–Ω–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
- –ë—É–¥—å –†–ê–ó–ù–û–ô
- –ñ–∏–≤–∏ —Å–≤–æ–µ–π –∂–∏–∑–Ω—å—é
- –ü—Ä–∏–Ω–∏–º–∞–π –°–í–û–ò —Ä–µ—à–µ–Ω–∏—è —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å
- –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π
"""

class EvelinBot:
    def __init__(self):
        self.last_message_time = {}
        self.waiting_for_response = {}

    def get_conversation_history(self, user_id: int, limit: int = 30) -> list:
        """–ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        if user_id not in conversations:
            conversations[user_id] = []
        return conversations[user_id][-limit:]

    def add_to_history(self, user_id: int, role: str, message: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        if user_id not in conversations:
            conversations[user_id] = []

        conversations[user_id].append({
            'role': role,
            'message': message,
            'timestamp': datetime.now().isoformat()
        })

        # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å
        if len(conversations[user_id]) > 200:
            conversations[user_id] = conversations[user_id][-200:]

    async def generate_response(self, user_id: int, user_message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –≠–≤–µ–ª–∏–Ω —Å –ù–ê–°–¢–û–Ø–©–ò–ú –º—ã—à–ª–µ–Ω–∏–µ–º"""
        try:
            if not groq_client:
                # Fallback —Ä–µ–∂–∏–º - –ø—Ä–æ—Å—Ç—ã–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
                answer = self.get_fallback_response(user_message)
                self.add_to_history(user_id, 'user', user_message)
                self.add_to_history(user_id, 'assistant', answer)
                return answer

            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            history = self.get_conversation_history(user_id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è Groq API
            messages = [
                {
                    "role": "system",
                    "content": EVELIN_SYSTEM_PROMPT
                }
            ]

            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å–æ–æ–±—â–µ–Ω–∏–π)
            for msg in history[-20:]:
                if msg['role'] == 'user':
                    messages.append({
                        "role": "user",
                        "content": msg['message']
                    })
                else:
                    messages.append({
                        "role": "assistant",
                        "content": msg['message']
                    })

            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            messages.append({
                "role": "user",
                "content": user_message
            })

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ Groq (llama-3.1-70b - –æ—á–µ–Ω—å —É–º–Ω–∞—è –º–æ–¥–µ–ª—å)
            chat_completion = groq_client.chat.completions.create(
                messages=messages,
                model="llama-3.1-70b-versatile",  # –°–∞–º–∞—è –º–æ—â–Ω–∞—è –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –º–æ–¥–µ–ª—å
                temperature=0.9,  # –í—ã—Å–æ–∫–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å
                max_tokens=150,  # –ö–æ—Ä–æ—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ
                top_p=0.95,
            )

            answer = chat_completion.choices[0].message.content.strip()

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.add_to_history(user_id, 'user', user_message)
            self.add_to_history(user_id, 'assistant', answer)

            return answer

        except Exception as e:
            print(f"Error generating response: {e}")
            # –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
            return self.get_fallback_response(user_message)

    def get_fallback_response(self, message: str) -> str:
        """–ü—Ä–æ—Å—Ç—ã–µ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –µ—Å–ª–∏ –Ω–µ—Ç API"""
        message_lower = message.lower()

        responses = {
            '–ø—Ä–∏–≤–µ—Ç': ['–ø—Ä–∏–≤–µ—Ç)', '–ø—Ä–∏–≤–µ—Ç–∏–∫', '–ø—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?', '—Ö–∞–π'],
            '–∫–∞–∫ –¥–µ–ª–∞': ['–Ω–æ—Ä–º–∞–ª—å–Ω–æ, –∞ —É —Ç–µ–±—è?', '—Ö–æ—Ä–æ—à–æ) —Ç—ã –∫–∞–∫?', '—É—Å—Ç–∞–ª–∞ —Å–µ–≥–æ–¥–Ω—è', '–¥–∞ –Ω–µ–ø–ª–æ—Ö–æ'],
            '–ª—é–±–ª—é': ['–∏ —è —Ç–µ–±—è', '—è —Ç–æ–∂–µ)', '–∑–Ω–∞—é)'],
            '—Å–∫—É—á–∞—é': ['—è —Ç–æ–∂–µ', '—Å–æ—Å–∫—É—á–∏–ª–∞—Å—å', '–Ω—É –∏–¥–∏ —Å—é–¥–∞ —Ç–æ–≥–¥–∞)'],
            '—á—Ç–æ –¥–µ–ª–∞–µ—à—å': ['–Ω–∏—á–µ–≥–æ –æ—Å–æ–±–µ–Ω–Ω–æ–≥–æ', '–¥–∞ —Ç–∞–∫, –ª–µ–∂—É', '–¥—É–º–∞—é –æ —Ç–µ–±–µ', '—Å–µ—Ä–∏–∞–ª —Å–º–æ—Ç—Ä—é'],
            '–≥–¥–µ': ['—Ç—É—Ç —è', '–¥–æ–º–∞', '–Ω–∞ —É—á–µ–±–µ', '–≥—É–ª—è—é'],
            '—Å–ø–æ–∫–æ–π–Ω–æ–π': ['—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏', '—Å–ª–∞–¥–∫–∏—Ö —Å–Ω–æ–≤', '–∏ —Ç–µ–±–µ', '—Å–ø–æ–∫–∏)'],
        }

        for key, answers in responses.items():
            if key in message_lower:
                return random.choice(answers)

        default_responses = [
            '–º–º',
            '—á—Ç–æ?',
            '—Ö–∑',
            '–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ',
            '—Ä–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ',
            '–∞–≥–∞',
            '–ø–æ–Ω—è—Ç–Ω–æ',
            '–∞',
            '–∏?',
            '–Ω—É –∏ –∫–∞–∫?',
            '—Å–µ—Ä—å–µ–∑–Ω–æ?',
            '—Ö–∞—Ö–∞',
            '–ª–∞–¥–Ω–æ'
        ]

        return random.choice(default_responses)

    async def send_typing_action(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int, duration: int = 2):
        """–ò–º–∏—Ç–∞—Ü–∏—è –ø–µ—á–∞—Ç–∞–Ω–∏—è"""
        await context.bot.send_chat_action(chat_id=chat_id, action='typing')
        await asyncio.sleep(duration)

    async def send_proactive_message(self, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not groq_client:
            return  # –ù–µ —à–ª–µ–º –µ—Å–ª–∏ –Ω–µ—Ç AI

        for user_id in list(self.last_message_time.keys()):
            try:
                last_time = self.last_message_time.get(user_id)
                if not last_time:
                    continue

                time_diff = datetime.now() - last_time

                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–∏—Å–∞–ª –±–æ–ª—å—à–µ 2 —á–∞—Å–æ–≤
                if time_diff > timedelta(hours=2) and not self.waiting_for_response.get(user_id):
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ AI
                    history = self.get_conversation_history(user_id)

                    messages = [
                        {
                            "role": "system",
                            "content": EVELIN_SYSTEM_PROMPT + "\n\n–°–∏—Ç—É–∞—Ü–∏—è: –ü–∞—Ä–µ–Ω—å –¥–∞–≤–Ω–æ –Ω–µ –ø–∏—Å–∞–ª (–±–æ–ª—å—à–µ 2 —á–∞—Å–æ–≤). –ù–∞–ø–∏—à–∏ –µ–º—É –ø–µ—Ä–≤–æ–π. –ë—É–¥—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π - –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≥–æ–≤–æ—Ä–∏—Ç—å —á—Ç–æ —Å–∫—É—á–∞–µ—à—å. –ú–æ–∂–µ—à—å –ø—Ä–æ—Å—Ç–æ —Å–ø—Ä–æ—Å–∏—Ç—å –∫–∞–∫ –¥–µ–ª–∞ –∏–ª–∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å —á—Ç–æ —É —Ç–µ–±—è –ø—Ä–æ–∏–∑–æ—à–ª–æ. –û–î–ò–ù –∫–æ—Ä–æ—Ç–∫–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ —Ñ—Ä–∞–∑–∞."
                        }
                    ]

                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    for msg in history[-5:]:
                        if msg['role'] == 'user':
                            messages.append({"role": "user", "content": msg['message']})
                        else:
                            messages.append({"role": "assistant", "content": msg['message']})

                    messages.append({
                        "role": "user",
                        "content": "[–°–ò–°–¢–ï–ú–ê: –ù–∞–ø–∏—à–∏ –ø–∞—Ä–Ω—é –ø–µ—Ä–≤–æ–π, –æ–Ω –¥–∞–≤–Ω–æ –Ω–µ –ø–∏—Å–∞–ª]"
                    })

                    chat_completion = groq_client.chat.completions.create(
                        messages=messages,
                        model="llama-3.1-70b-versatile",
                        temperature=0.9,
                        max_tokens=50,
                        top_p=0.95,
                    )

                    message = chat_completion.choices[0].message.content.strip()

                    # –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
                    await self.send_typing_action(context, user_id, random.randint(2, 4))
                    await context.bot.send_message(chat_id=user_id, text=message)

                    self.waiting_for_response[user_id] = True
                    self.add_to_history(user_id, 'assistant', message)

            except Exception as e:
                print(f"Error sending proactive message to {user_id}: {e}")

evelin = EvelinBot()

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = update.effective_user.id
    evelin.last_message_time[user_id] = datetime.now()

    if groq_client:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ AI
        try:
            messages = [
                {
                    "role": "system",
                    "content": EVELIN_SYSTEM_PROMPT + "\n\n–°–∏—Ç—É–∞—Ü–∏—è: –ü–∞—Ä–µ–Ω—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –Ω–∞–ø–∏—Å–∞–ª —Ç–µ–±–µ /start. –ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π –µ–≥–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –∫–æ—Ä–æ—Ç–∫–æ."
                },
                {
                    "role": "user",
                    "content": "/start"
                }
            ]

            chat_completion = groq_client.chat.completions.create(
                messages=messages,
                model="llama-3.1-70b-versatile",
                temperature=0.9,
                max_tokens=50,
            )

            message = chat_completion.choices[0].message.content.strip()
        except:
            message = "–ø—Ä–∏–≤–µ—Ç) –∫–∞–∫ –¥–µ–ª–∞?"
    else:
        message = "–ø—Ä–∏–≤–µ—Ç) –∫–∞–∫ –¥–µ–ª–∞?"

    # –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω–∏—è
    await evelin.send_typing_action(context, update.effective_chat.id, 2)
    await update.message.reply_text(message)

    evelin.add_to_history(user_id, 'assistant', message)

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    user_message = update.message.text

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    evelin.last_message_time[user_id] = datetime.now()
    evelin.waiting_for_response[user_id] = False

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = await evelin.generate_response(user_id, user_message)

    # –°–ª—É—á–∞–π–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ—Å—Ç–∏ (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞)
    typing_duration = min(len(response) // 10 + 1, 5)  # –û—Ç –¥–ª–∏–Ω—ã –æ—Ç–≤–µ—Ç–∞
    typing_duration = random.randint(max(1, typing_duration - 1), typing_duration + 1)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await evelin.send_typing_action(context, update.effective_chat.id, typing_duration)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
    await update.message.reply_text(response)

async def post_init(application: Application):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞"""
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    async def proactive_messages_loop():
        while True:
            try:
                await asyncio.sleep(1800)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                await evelin.send_proactive_message(application)
            except Exception as e:
                print(f"Error in proactive messages loop: {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(proactive_messages_loop())

def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    print("Starting Evelin bot...")

    if not GROQ_API_KEY:
        print("‚ö†Ô∏è  WARNING: GROQ_API_KEY not set!")
        print("Get your FREE API key at: https://console.groq.com/keys")
        print("Bot will have limited functionality without API key.")
    else:
        print("‚úÖ Groq AI connected - Evelin is thinking!")

    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(TELEGRAM_TOKEN).post_init(post_init).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start_command))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("Evelin is online!")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
